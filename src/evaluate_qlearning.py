# -*- coding: utf-8 -*-
"""evaluate_qlearning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kxHOp8UzMqMgQfFhr_i7i58kdZcTemX7
"""

import numpy as np
import pandas as pd
import os
from train_qlearning import QLearningAgent

agent_q_table = np.load("enhanced_q_table.npy")
state_idx = np.load("state_idx.npy", allow_pickle=True).item()
baseline_profit = float(open("baseline_profit.txt").read())


# ---------------------------------------------------
# ‚ö°Ô∏è 1Ô∏è‚É£ Load Output dari Training
# ---------------------------------------------------
q_table = np.load("enhanced_q_table.npy")           # dari training
profits = np.load("enhanced_profits.npy")         # dari training

# ‚ö°Ô∏è 3Ô∏è‚É£ Inisiasi Agent dengan Q-Table dari Training
# ---------------------------------------------------
agent = QLearningAgent(
    n_states=len(env.states),
    n_actions=len(env.actions),
    lr=0.1,
    gamma=0.95,
    epsilon=0.0,  # Evaluasi gak perlu eksplorasi
)

# Masukkan Q-Table dari Training
agent.q_table = q_table

# ---------------------------------------------------
# ‚ö°Ô∏è 4Ô∏è‚É£ Evaluasi
# ---------------------------------------------------
from evaluate_qlearning import evaluate  # asumsi evaluate kamu simpan di file ini

evaluate(agent, env, state_idx, profits, n_test_episodes=100, test_max_steps=10)

# Sekarang lu bisa buat eval dengan data yang lengkap
def evaluate(agent, env, state_idx, profits, n_test_episodes=100, test_max_steps=10, save_dir="evaluation"):
    os.makedirs(save_dir, exist_ok=True)

    # 1Ô∏è‚É£ Statistik Profit Training
    final_avg_profit = np.mean(profits[-100:])
    original_profit = env.original_profit_mean
    improvement_ratio = final_avg_profit / original_profit if original_profit > 0 else 0

    # 2Ô∏è‚É£ Profit per State (Observasi Pola)
    state_profits = {state: [] for state in state_idx.keys()}
    for _ in range(n_test_episodes):
        state = env.reset()
        s = state_idx[state]
        done = False
        while not done:
            action = np.argmax(agent.q_table[s])
            next_state, reward, done = env.step(env.actions[action])
            state_profits[state].append(reward)
            state = next_state
            s = state_idx[state]

    state_avg_profit = {k: np.mean(v) for k, v in state_profits.items() if v}

    # 3Ô∏è‚É£ Simulasi Profit Final (Test)
    test_profits = []
    for _ in range(n_test_episodes):
        state = env.reset()
        s = state_idx[state]
        total_profit = 0
        for _ in range(test_max_steps):
            action = np.argmax(agent.q_table[s])
            next_state, reward, done = env.step(env.actions[action])
            total_profit += reward
            state = next_state
            s = state_idx[state]
            if done:
                break
        test_profits.append(total_profit)

    # 4Ô∏è‚É£ Export Laporan
    eval_data = {
        "final_avg_profit": final_avg_profit,
        "original_profit": original_profit,
        "improvement_ratio": improvement_ratio,
        "test_avg_profit": np.mean(test_profits),
        "test_max_profit": np.max(test_profits),
    }
    eval_df = pd.DataFrame([eval_data])
    eval_df.to_csv(f"{save_dir}/evaluation_report.csv", index=False)

    state_profit_df = pd.DataFrame(list(state_avg_profit.items()),
                                    columns=["state", "average_profit"])
    state_profit_df.to_csv(f"{save_dir}/state_profit_analysis.csv", index=False)

    # ‚úÖ Output Ringkasan
    print("\n=== ‚ö°Ô∏è EVALUATION SUMMARY ‚ö°Ô∏è ===")
    print(f"Final Avg Profit (Last 100): Rp {final_avg_profit:.2f}")
    print(f"Original Profit Baseline : Rp {original_profit:.2f}")
    print(f"Improvement Ratio       : {improvement_ratio:.2%}")
    print(f"Test Avg Profit ({n_test_episodes} eps): Rp {np.mean(test_profits):.2f}")
    print(f"Test Max Profit           : Rp {np.max(test_profits):.2f}")

    print("\nüìä Profit per State (average):")
    for state, avg_profit in state_avg_profit.items():
        print(f" - State [{state}]: Rp {avg_profit:.2f}")
assert len(env.states) == len(state_idx), "State index dan environment state tidak cocok!"

    print("\nüíæ Evaluation files saved to:", save_dir)

# ==================================================
# ‚ö°Ô∏è MAIN EVALUATION CALL
# ==================================================
evaluate(agent, env, state_idx, profits, n_test_episodes=100, test_max_steps=10)



