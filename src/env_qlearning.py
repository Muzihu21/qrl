# -*- coding: utf-8 -*-
"""env_qlearning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Z8dn-btJAHZLTw9gYRKM3HbCBanvuOvu
"""

import pandas as pd
import random

class PenjualanEnv:
    def __init__(self, data_path='env_SAR.csv', max_steps=10):
        self.data = pd.read_csv(data_path)
        self.states = list(zip(self.data['harga_index'], self.data['penjualan_level']))
        self.rewards = self.data['reward'].tolist()

        self.unique_harga = sorted(self.data['harga_index'].unique())
        self.unique_penjualan = sorted(self.data['penjualan_level'].unique())
        self.n_actions = 3  # 0: Turun harga, 1: Tetap, 2: Naik harga

        # ✅ Tambahkan harga_list (untuk UI/visualisasi)
        # Ambil mapping index -> harga dari kolom harga jika ada
        if 'harga' in self.data.columns:
            harga_df = self.data[['harga_index', 'harga']].drop_duplicates()
            harga_df = harga_df.sort_values(by='harga_index')
            self.harga_list = harga_df['harga'].tolist()
        else:
            # Fallback: gunakan harga_index sebagai nominal langsung (kurang ideal)
            self.harga_list = self.unique_harga

        self.max_steps = max_steps
        self.reset()

    def reset(self):
        self.current_step = 0
        self.state = random.choice(self.states)
        return self.state

    def step(self, action):
        harga_idx, penjualan_lvl = self.state

        # Transisi harga berdasarkan aksi
        if action == 0 and harga_idx > min(self.unique_harga):
            harga_idx -= 1
        elif action == 2 and harga_idx < max(self.unique_harga):
            harga_idx += 1
        # action == 1 → harga tetap

        # Cari semua data dengan state baru
        possible_states = [(h, p) for h, p in self.states if h == harga_idx]
        next_state = random.choice(possible_states) if possible_states else self.state

        self.state = next_state
        self.current_step += 1

        # Ambil reward dari state baru
        try:
            idx = self.states.index(self.state)
            reward = self.rewards[idx]
        except ValueError:
            reward = 0  # fallback kalau state tidak ditemukan

        done = self.current_step >= self.max_steps
        return self.state, reward, done
pass

class EnhancedPenjualanEnv(PenjualanEnv):
    """Environment dengan Reward yang Disesuaikan untuk Q-learning."""
    def __init__(self, data_path='env_SAR.csv', max_steps=10):
        super().__init__(data_path, max_steps)
        self.original_profit_mean = self._load_baseline()

    def _load_baseline(self):
        """Hitung rata-rata profit dari data, kalau gagal kasih nilai default."""
        try:
            df = pd.read_csv(self.data_path)
            return df['profit'].mean() if 'profit' in df else 50000
        except:
            return 50000

    def calculate_reward(self, profit):
        """Reward = Normalisasi Profit + Bonus"""
        return (profit - self.original_profit_mean) * 10 + 100

    def step(self, action):
        """Override step dari parent, tambahkan perhitungan reward."""
        next_state, profit, done = super().step(action)

        # Hitung reward dari profit
        reward = self.calculate_reward(profit)

        return next_state, reward, done

